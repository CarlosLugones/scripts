#!/usr/bin/env bash

# update - Update lugo command system from GitHub
# This command fetches the latest version from the main branch and reinstalls

set -e

# Configuration
REPO_URL="https://github.com/CarlosLugones/scripts.git"
TEMP_DIR="/tmp/lugo-update-$$"
INSTALL_DIR="${HOME}/.local/bin"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[UPDATE]${NC} $1"
}

show_help() {
    cat << EOF
update - Update lugo command system from GitHub

Usage: lugo update [--help] [--check-only] [--force]

Options:
    --help          Show this help message
    --check-only    Only check for updates, don't install
    --force         Force update even if versions are the same

Description:
    This command fetches the latest version of lugo from the main branch
    of the GitHub repository and reinstalls all commands.

Examples:
    lugo update                 # Update to latest version
    lugo update --check-only    # Check for updates only
    lugo update --force         # Force reinstall

EOF
}

# Get current installed version
get_current_version() {
    if [[ -f "$INSTALL_DIR/VERSION" ]]; then
        cat "$INSTALL_DIR/VERSION" 2>/dev/null || echo "unknown"
    else
        echo "unknown"
    fi
}

# Get remote version
get_remote_version() {
    local temp_version_file="/tmp/lugo-version-check-$$"
    if curl -s -f "https://raw.githubusercontent.com/CarlosLugones/scripts/main/VERSION" > "$temp_version_file" 2>/dev/null; then
        cat "$temp_version_file"
        rm -f "$temp_version_file"
    else
        echo "unknown"
    fi
}

# Check if git is available
check_git() {
    if ! command -v git >/dev/null 2>&1; then
        print_error "git is not installed or not in PATH"
        print_error "Please install git to use the update functionality"
        exit 1
    fi
}

# Check if curl is available
check_curl() {
    if ! command -v curl >/dev/null 2>&1; then
        print_error "curl is not installed or not in PATH"
        print_error "Please install curl to use the update functionality"
        exit 1
    fi
}

# Cleanup function
cleanup() {
    if [[ -d "$TEMP_DIR" ]]; then
        rm -rf "$TEMP_DIR"
    fi
}

# Set up cleanup trap
trap cleanup EXIT

# Update function
update_lugo() {
    local check_only="$1"
    local force_update="$2"
    
    print_info "Checking for lugo updates..."
    
    # Check dependencies
    check_git
    check_curl
    
    # Get versions
    local current_version
    local remote_version
    current_version=$(get_current_version)
    remote_version=$(get_remote_version)
    
    print_status "Current version: $current_version"
    print_status "Remote version: $remote_version"
    
    if [[ "$remote_version" == "unknown" ]]; then
        print_error "Could not fetch remote version"
        print_error "Please check your internet connection and try again"
        exit 1
    fi
    
    # Check if update is needed
    if [[ "$current_version" == "$remote_version" && "$force_update" != "true" ]]; then
        print_info "lugo is already up to date (version $current_version)"
        return 0
    fi
    
    if [[ "$check_only" == "true" ]]; then
        if [[ "$current_version" != "$remote_version" ]]; then
            print_info "Update available: $current_version -> $remote_version"
            echo "Run 'lugo update' to install the latest version"
        fi
        return 0
    fi
    
    # Perform update
    print_info "Updating lugo from $current_version to $remote_version..."
    
    # Create temporary directory
    mkdir -p "$TEMP_DIR"
    
    # Clone the repository
    print_status "Downloading latest version from GitHub..."
    if ! git clone --depth 1 --branch main "$REPO_URL" "$TEMP_DIR" >/dev/null 2>&1; then
        print_error "Failed to clone repository"
        print_error "Please check your internet connection and try again"
        exit 1
    fi
    
    # Verify the downloaded version
    local downloaded_version
    if [[ -f "$TEMP_DIR/VERSION" ]]; then
        downloaded_version=$(cat "$TEMP_DIR/VERSION")
        print_status "Downloaded version: $downloaded_version"
    else
        print_warning "VERSION file not found in downloaded repository"
        downloaded_version="unknown"
    fi
    
    # Install the update
    print_status "Installing updated lugo..."
    cd "$TEMP_DIR"
    
    # Make install script executable
    chmod +x install.sh
    
    # Run installation
    if ./install.sh install; then
        print_info "lugo successfully updated to version $downloaded_version"
        print_status "All commands have been updated"
        print_status "You can now use the latest version of lugo"
    else
        print_error "Installation failed"
        print_error "Your previous installation should still be functional"
        exit 1
    fi
}

# Main logic
main() {
    local check_only="false"
    local force_update="false"
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help|-h)
                show_help
                exit 0
                ;;
            --check-only)
                check_only="true"
                shift
                ;;
            --force)
                force_update="true"
                shift
                ;;
            *)
                print_error "Unknown option: $1"
                echo "Run 'lugo update --help' for usage information"
                exit 1
                ;;
        esac
    done
    
    # Check if lugo is installed
    if [[ ! -f "$INSTALL_DIR/lugo" ]]; then
        print_error "lugo does not appear to be installed"
        print_error "Please run the installation script first"
        exit 1
    fi
    
    update_lugo "$check_only" "$force_update"
}

main "$@"